{
  extends: [
    'config:recommended',
    'helpers:pinGitHubActionDigests',
    ':semanticCommitTypeAll(deps)',
  ],
  semanticCommitScope: '',
  labels: [
    'dependencies',
  ],
  dependencyDashboard: true,
  separateMinorPatch: true,
  // Rate limiting and PR management
  prHourlyLimit: 6,
  prConcurrentLimit: 20,
  recreateWhen: 'always', // Recreate grouped PRs when new updates arrive
  rebaseWhen: 'behind-base-branch', // Auto-rebase when behind
  commitBodyTable: true,
  separateMajorMinor: false,
  // Automerge safety: Wait for all status checks before merging
  ignoreTests: false, // Explicitly wait for status checks to pass
  prCreation: 'not-pending', // Don't create PR until status checks exist
  prBodyNotes: [
    '{{#if isMajor}}:warning: THIS IS A MAJOR VERSION UPDATE :warning:{{/if}}',
    'Before merging, *always* check with the release notes if any other changes need to be done.',
  ],
  major: {
    enabled: true,
    addLabels: ['upgrade:major'],
  },
  minor: {
    enabled: true,
    addLabels: ['upgrade:minor'],
  },
  patch: {
    enabled: true,
    addLabels: ['upgrade:patch'],
  },
  vulnerabilityAlerts: {
    addLabels: ['security'],
    enabled: true,
  },
  'helm-values': {
    fileMatch: [
      '(^|/).*?values.*?\\.yaml$',
    ],
  },
  // GitHub Actions configuration
  'github-actions': {
    enabled: true,
    fileMatch: [
      '^\\.github/workflows/[^/]+\\.ya?ml$',
    ],
  },
  customDatasources: {
    'rosa-camunda': {
      defaultRegistryUrlTemplate: 'https://camunda.github.io/camunda-tf-rosa/rosa_versions.txt',
      format: 'plain',
    },
  },
  packageRules: [
    //
    // Safety: Require manual approval for major updates.
    {
      description: 'Require manual approval for major updates (e.g., ES 9, PG 18) to prevent breaking changes without maintainer review.',
      matchUpdateTypes: ['major'],
      automerge: false,
      platformAutomerge: false,
      dependencyDashboardApproval: false, // Create PR immediately but don't automerge
      addLabels: ['requires-manual-review'],
    },
    //
    // Scheduling by update type to spread PRs across the weekend.
    {
      description: 'Only update major versions on Fridays outside of business hours.',
      matchUpdateTypes: ['major'],
      schedule: ['* 0-6,18-23 * * 5'], // Friday nights
    },
    {
      description: 'Only update minor versions on Saturdays.',
      matchUpdateTypes: ['minor'],
      schedule: ['* * * * 6'],
    },
    {
      description: 'Only update patch versions on Sundays.',
      matchUpdateTypes: ['pin', 'digest', 'patch'],
      schedule: ['* * * * 0'],
    },
    //
    // Infraex-style batching: Group all chart versions by update type to reduce PR noise.
    // This creates ~4 PRs total instead of ~12-14 per-chart PRs.
    //
    // Chart versions batch (minor updates across all charts)
    {
      groupName: 'charts-minor-updates',
      description: 'Batch all minor version updates across all charts into one PR',
      addLabels: [
        'deps/charts',
        'upgrade:minor',
      ],
      matchFileNames: [
        'charts/*/Chart.yaml',
        'charts/*/values*.yaml',
        'charts/*/go.*',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      pinDigests: false,
    },
    // Chart versions batch (patch updates across all charts)
    {
      groupName: 'charts-patch-updates',
      description: 'Batch all patch version updates across all charts into one PR',
      addLabels: [
        'deps/charts',
        'upgrade:patch',
      ],
      matchFileNames: [
        'charts/*/Chart.yaml',
        'charts/*/values*.yaml',
        'charts/*/go.*',
      ],
      matchUpdateTypes: [
        'patch',
        'pin',
      ],
      pinDigests: false,
    },
    // Digest updates batch (across all charts)
    {
      groupName: 'charts-digest-updates',
      description: 'Batch all digest updates across all charts into one PR',
      matchManagers: [
        'regex',
      ],
      addLabels: [
        'deps/charts',
        'upgrade:digest',
      ],
      matchFileNames: [
        'charts/*/values-digest.yaml',
      ],
      matchUpdateTypes: [
        'digest',
      ],
      pinDigests: true,
    },
    // Major updates still separate (safety requires per-dependency review)
    // These will NOT be grouped and require manual review via the major packageRule above

    //
    // Tools.
    {
      groupName: 'tool-versions',
      addLabels: [
        'deps/tools',
      ],
      matchFileNames: [
        '.tool-versions',
      ],
      schedule: [
        'every weekend',
      ],
    },
    {
      groupName: 'github-actions',
      addLabels: [
        'deps/github-actions',
      ],
      matchManagers: [
        'github-actions',
      ],
      schedule: [
        'every weekend',
      ],
    },
    // Limit tools and libs versions to the actual Distro CI Kubernetes cluster.
    {
      allowedVersions: '<1.28.0',
      matchDepNames: [
        '/kubectl/',
      ],
    },
    {
      allowedVersions: '<0.28.0',
      matchDepNames: [
        '/k8s.io/.*/',
      ],
    },
    // Some asdf plugins use the "v" prefix, so we extract the version without it.
    {
      matchFileNames: [
        '.tool-versions',
      ],
      matchPackageNames: [
        'hairyhenderson/gomplate',
        'gomplate',
      ],
      extractVersion: '^(?<version>v.*)$',
    },
    //
    // Camunda charts.
    {
      // Disable major version update for all Helm components.
      enabled: false,
      matchManagers: [
        'helmv3',
        'helm-values',
        'custom.regex',
      ],
      matchUpdateTypes: [
        'major',
      ],
    },
    {
      // Disable app minor version update in the previous Camunda Helm charts.
      enabled: false,
      matchPackageNames: [
        '/.*camunda/[.-]*/',
        '/registry.camunda.cloud/[.-/]*/',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.*/values.yaml',
        'charts/camunda-platform-8.*/values-latest.yaml',
      ],
      matchUpdateTypes: [
        'minor',
      ],
    },
    {
      // This docker image appears to require authentication, and is only used for 8.2 HC's so I'm disabling it to prevent issues with renovate.
      enabled: false,
      matchPackageNames: [
        'bitnamilegacy/elasticsearch-curator-archived',
        'elasticsearch-curator-archived',
      ],
    },
    {
      // Enable app patch version update in the previous Camunda Helm charts.
      matchDatasources: [
        'helmv3',
        'helm-values',
        'docker',
        'regex',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.*/values.yaml',
        'charts/camunda-platform-8.*/values-latest.yaml',
      ],
      matchUpdateTypes: [
        'patch',
      ],
    },
    // Limit Elasticsearch version to latest supported version in Camunda 8.3 chart.
    // https://docs.camunda.io/docs/8.3/reference/supported-environments/#camunda-8-self-managed
    {
      matchDatasources: [
        'docker',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.3/values.yaml',
        'charts/camunda-platform-8.3/values-latest.yaml',
      ],
      matchPackageNames: [
        '/.*elasticsearch.*/',
      ],
      allowedVersions: '~8.8.0',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.3/Chart.yaml',
      ],
      matchPackageNames: [
        '/.*elasticsearch.*/',
      ],
      allowedVersions: '19.13.15',
    },
    // Limit Elasticsearch version to latest supported version in Camunda 8.4 chart.
    // https://docs.camunda.io/docs/8.4/reference/supported-environments/#camunda-8-self-managed
    {
      matchDatasources: [
        'docker',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.4/values.yaml',
        'charts/camunda-platform-8.4/values-latest.yaml',
      ],
      matchPackageNames: [
        '/.*elasticsearch.*/',
      ],
      allowedVersions: '~8.9.0',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.4/Chart.yaml',
      ],
      matchPackageNames: [
        '/.*elasticsearch.*/',
      ],
      allowedVersions: '19.19.4',
    },
    // Limit Elasticsearch version to latest supported version in Camunda 8.5 chart.
    // https://docs.camunda.io/docs/8.5/reference/supported-environments/#camunda-8-self-managed
    {
      matchDatasources: [
        'docker',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.5/values.yaml',
        'charts/camunda-platform-8.5/values-latest.yaml',
      ],
      matchPackageNames: [
        '/.*elasticsearch.*/',
      ],
      allowedVersions: '~8.12.0',
    },
    // Limit Elasticsearch version to latest supported version in Camunda 8.6 chart.
    // https://docs.camunda.io/docs/8.6/reference/supported-environments/#camunda-8-self-managed
    {
      matchDatasources: [
        'docker',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.6/values.yaml',
        'charts/camunda-platform-8.6/values-latest.yaml',
      ],
      matchPackageNames: [
        '/.*elasticsearch.*/',
      ],
      allowedVersions: '~8.15.0',
    },
    // Limit Elasticsearch version to latest supported version in Camunda 8.7 chart.
    // https://docs.camunda.io/docs/reference/supported-environments/#camunda-8-self-managed
    {
      matchDatasources: [
        'docker',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.7/values.yaml',
        'charts/camunda-platform-8.7/values-latest.yaml',
      ],
      matchPackageNames: [
        '/.*elasticsearch.*/',
      ],
      allowedVersions: '~8.17.0',
    },
    // Limit alpha chart version to alpha tags only.
    {
      enabled: true,
      matchDatasources: [
        'github-tags',
      ],
      matchPackageNames: [
        'camunda/camunda',
      ],
      matchFileNames: [
        // bump these to whatever the latest alpha is
        'charts/camunda-platform-8.9/Chart.yaml',
      ],
      versioning: 'regex:^(?<major>\\d+)(.(?<minor>\\d+))(.(?<patch>\\d+))(-(?<prerelease>alpha[1-9]))$',
    },
    //
    // General.
    {
      enabled: true,
      matchPackageNames: [
        '/.*camunda.*/',
      ],
      matchDatasources: [
        'helm',
        'docker',
        'regex',
      ],
      matchFileNames: [
        // bump these to whatever the latest alpha is
        'charts/camunda-platform-8.8/Chart.yaml',
        'charts/camunda-platform-8.8/values*.yaml',
      ],
      // Ignore non-semver versions like 8.6.0-alpha3-rc3 which has a higher precedence than 8.6.0-alpha3
      // which is not the case.
      versionCompatibility: '^(?<version>\\d+.\\d+.\\d+(-alpha[1-9])?)(?<compatibility>.*)$',
      // setting versioning to semver is important because by default docker versioning will
      // assume that anything after the dash is a compatibility rather than a prerelease
      // indicator. Some docker images have versions like 8.5.0-alpine but in camunda
      // images, we use 8.5.0-alpha3.
      versioning: 'semver',
    },
    {
      // Limit alpha chart version to alpha tags only.
      enabled: true,
      matchDatasources: [
        'github-tags',
      ],
      matchPackageNames: [
        'camunda/camunda',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.9/Chart.yaml',
      ],
      versioning: 'regex:^(?<major>\\d+)(.(?<minor>\\d+))(.(?<patch>\\d+))(-(?<prerelease>alpha[1-9]))$',
    },
    {
      enabled: true,
      matchPackageNames: [
        '/.*camunda.*/',
      ],
      matchDatasources: [
        'helm',
        'docker',
        'regex',
      ],
      matchFileNames: [
        'charts/camunda-platform-8.9/Chart.yaml',
        'charts/camunda-platform-8.9/values*.yaml',
      ],
      // Ignore non-semver versions like 8.6.0-alpha3-rc3 which has a higher precedence than 8.6.0-alpha3
      // which is not the case.
      versionCompatibility: '^(?<version>\\d+.\\d+.\\d+(-alpha[1-9])?)(?<compatibility>.*)$',
      versioning: 'semver',
    },
    {
      matchFileNames: [
        '.tool-versions',
        '.github/workflows/*',
        '.github/actions/*',
        'charts/**',
      ],
      addLabels: [
        'automerge',
        'automation/renovatebot',
        'kind/chore',
      ],
      // Use Renovate's automerge (not GitHub's platformAutomerge)
      // Renovate waits for all status checks by default, which works with dynamic checks per chart version
      platformAutomerge: false,
      automerge: true,
      automergeType: 'pr', // Merge via PR to respect GitHub settings
      ignoreTests: false, // Wait for all status checks to pass
    },
    // This package name is used by the initContainer for keycloak in v8.5, and doesn't make sense to
    // be processed by renovate because it requires helm templating to render the real image name.
    {
      "matchDepNames": ["{{ .Values.global.identity.image.registry }}/{{ .Values.global.identity.image.repository }}{{ if .Values.global.identity.image.digest }}"],
      "enabled": false
    },
  ],
  customManagers: [
    {
      // This is mainly used to Camunda alpha chart.
      customType: 'regex',
      fileMatch: [
        '\\.yaml$',
      ],
      datasourceTemplate: 'github-tags',
      matchStrings: [
        '# renovate: datasource=github-tags depName=(?<depName>.+?)( versioning=(?<versioning>.+?))?(?: (lookupName|packageName)=(?<packageName>[^\\s]+?))?\\s+?version: (?<currentValue>\\S+)',
      ],
      versioningTemplate: '{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}',
    },
    {
      // This is used to update npm packages in GitHub Actions workflows.
      customType: 'regex',
      fileMatch: [
        '^\\.github/workflows/.*\\.ya?ml$',
      ],
      datasourceTemplate: 'npm',
      matchStrings: [
        '# renovate: datasource=npm depName=(?<depName>[^\\s]+?)\\s*\\n\\s*npm install -g [^\\s]+?@(?<currentValue>\\S+)',
      ],
      versioningTemplate: 'semver',
    },
    {
      // This is mainly used to update enterprise image tags like Console and Web-Modeler.
      // Console and Web-Modeler Self-Managed versions are different from SaaS versions,
      // hence, we use image tags from Camunda private registry as a source of truth for those components.
      // Another use case is Elasticsearch public Docker registry.
      customType: 'regex',
      fileMatch: [
        '\\.yaml$',
      ],
      datasourceTemplate: 'docker',
      matchStrings: [
        '# renovate: datasource=docker depName=(?<depName>[^\\s]+?)(?: (lookupName|packageName)=(?<packageName>[^\\s]+?))?(?: versioning=(?<versioning>[^\\s]+?))?(?: registryUrl=(?<registryUrl>[^\\s]+?))?\\s*?(tag|imageTag): (?<currentValue>\\S+)',
      ],
      versioningTemplate: '{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}',
    },
    // This regex manager is used to update the image digests in the values-digest.yaml files.
    {
      customType: 'regex',
      fileMatch: [
        'values-digest\\.yaml$'
      ],
      matchStrings: [
        /*
        # Example.
        orchestration:
          image:
            repository: camunda/camunda
            tag: SNAPSHOT
            digest: "sha256:abcdef123456789..."
        */
        'repository:\\s+(?<depName>\\S+)[\\s\\S]*?tag:\\s+(?<currentValue>[^\\s]+)[\\s\\S]*?digest:\\s+\"?(?<currentDigest>sha256:[a-f0-9]{64})\"?'
      ],
      datasourceTemplate: 'docker',
      versioningTemplate: 'docker',
    }
  ],
  hostRules: [
    {
      hostType: 'docker',
      matchHost: 'https://registry.camunda.cloud',
      username: 'ci-distribution',
      password: '{{ secrets.DISTRO_CAMUNDA_DOCKER_REGISTRY_PASSWORD }}',
    },
  ],
}
